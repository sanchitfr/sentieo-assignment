{"version":3,"sources":["components/card.component.jsx","components/col.component.jsx","data.js","components/cardList.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","task","index","icon","draggableId","id","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","isDragging","className","title","points","Col","column","tasks","droppableId","type","droppableProps","isDraggingOver","map","placeholder","dataset","criticality","status","columns","taskIds","columnOrder","CardList","useState","data","setData","onDragEnd","result","destination","source","start","finish","startTasks","Array","from","splice","newStart","finishTasks","newFinish","newState","newTaskIds","newColumn","newColumnOrder","direction","taskId","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8809bf82.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport \"../styles/card.styles.css\"\r\n\r\n\r\nconst Card = ({task, index, icon}) => {\r\n    return (\r\n        <Draggable draggableId={task.id} index={index}>\r\n            {(provided, snapshot) => (\r\n                <div\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                    ref={provided.innerRef}\r\n                    isDragging={snapshot.isDragging}\r\n                    className = \"card\"\r\n                >\r\n                    <h4>{task.title}</h4>\r\n                    <div className=\"card-content\">\r\n                        {icon}\r\n                        <span>{task.points}</span>\r\n                    </div>\r\n                </div>\r\n\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from \"react\";\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport '../styles/col.styles.css'\r\n\r\nimport Card from \"./card.component\";\r\n\r\nconst Col = ({column, index, tasks}) => {\r\n    return (\r\n        <Draggable draggableId={column.id} index={index}>\r\n                {(provided) => (\r\n                    <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}>\r\n                        <h3 {...provided.dragHandleProps}>{column.title}</h3>\r\n                        <Droppable droppableId={column.id} type='task'>\r\n                            {(provided, snapshot) => (\r\n                                <div\r\n                                    ref={provided.innerRef}\r\n                                    {...provided.droppableProps}\r\n                                    isDraggingOver={snapshot.isDraggingOver}  \r\n                                    className=\"col\"\r\n                                >\r\n                                    {tasks.map((task, index) => <Card key={task.id} task={task} icon={column.icon} index={index} />)}\r\n                                    {provided.placeholder}\r\n                                </div>\r\n                            )}\r\n                        </Droppable>\r\n                    </div>\r\n\r\n                )}\r\n        </Draggable>\r\n    );\r\n};\r\n\r\nexport default Col;","const TicketData = {\r\n    \"ticket-1\":{\r\n        id: \"ticket-1\",\r\n        title: \"Create trello clone app\",\r\n        type: \"story\",\r\n        criticality: \"Critical\",\r\n        points: 8,\r\n        status: \"inDev\"\r\n    },\r\n    \"ticket-2\":{\r\n        id: \"ticket-2\",\r\n        title: \"Fix font family style\",\r\n        type: \"bug\",\r\n        criticality: \"High\",\r\n        points: 3,\r\n        status: \"inDev\"\r\n    },\r\n    \"ticket-3\":{\r\n        id: \"ticket-3\",\r\n        title: \"Create readable readme.md file\",\r\n        type: \"documnetation\",\r\n        criticality: \"Low\",\r\n        points: 1,\r\n        status: \"todo\"\r\n    },\r\n    \"ticket-4\":{\r\n        id: \"ticket-4\",\r\n        title: \"Make git repository and upload source code\",\r\n        type: \"story\",\r\n        criticality: \"Medium\",\r\n        points: 3,\r\n        status: \"devComplete\"\r\n    },\r\n    \"ticket-5\":{\r\n        id: \"ticket-5\",\r\n        title: \"Deploy app using git pages\",\r\n        type: \"story\",\r\n        criticality: \"High\",\r\n        points: 3,\r\n        status: \"todo\"\r\n    }\r\n}\r\n\r\nconst columns = {\r\n   \"col-1\": {\r\n        id: \"col-1\",\r\n        taskIds: [\"ticket-3\", \"ticket-5\"],\r\n        title: \"Todo\",\r\n        icon: \"✏️\"\r\n    }, \r\n    \"col-2\": {\r\n        id: \"col-2\",\r\n        taskIds: [\"ticket-1\", \"ticket-2\"],\r\n        title: \"In development\",\r\n        icon: \"🕐\"\r\n    }, \r\n    \"col-3\":{\r\n        id: \"col-3\",\r\n        taskIds: [\"ticket-4\"],\r\n        title: \"Dev complete\",\r\n        icon: \"☑️\"\r\n    }, \r\n    \"col-4\":{\r\n        id: \"col-4\",\r\n        taskIds: [],\r\n        title: \"Staging\",\r\n        icon: \"📝\"\r\n    }, \r\n    \"col-5\":{\r\n        id:\"col-5\",\r\n        taskIds: [],\r\n        title: \"Done\",\r\n        icon: \"✅\",\r\n    }\r\n};\r\n\r\nconst columnOrder = [\"col-1\", \"col-2\",\"col-3\",\"col-4\",\"col-5\"]\r\n\r\nconst dataset = {tasks : TicketData, columns, columnOrder}\r\n\r\nexport default dataset;","import React, {useState} from 'react'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd'\r\n\r\nimport \"../styles/cardList.styles.css\"\r\n\r\nimport Col from './col.component'\r\nimport dataset from '../data';\r\n\r\nconst CardList = () => {\r\n\r\n    const [data, setData] = useState(dataset)\r\n\r\n    const onDragEnd = result => {\r\n        const { destination, source, draggableId, type } = result;\r\n        //If there is no destination\r\n        if (!destination) {return}\r\n        \r\n        //If source and destination is the same\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) { return }\r\n        \r\n        //If you're dragging columns\r\n        if (type === 'column') {\r\n            const newColumnOrder = Array.from(data.columnOrder);\r\n            newColumnOrder.splice(source.index, 1);\r\n            newColumnOrder.splice(destination.index, 0, draggableId);\r\n            const newState = {\r\n                ...data,\r\n                columnOrder: newColumnOrder\r\n            }\r\n            setData(newState)\r\n            return;\r\n        }\r\n\r\n        //Anything below this happens if you're dragging tasks\r\n        const start = data.columns[source.droppableId];\r\n        const finish = data.columns[destination.droppableId];\r\n        //If dropped inside the same column\r\n        if (start === finish) {\r\n            const newTaskIds = Array.from(start.taskIds);\r\n            newTaskIds.splice(source.index, 1);\r\n            newTaskIds.splice(destination.index, 0, draggableId);\r\n            const newColumn = {\r\n                ...start,\r\n                taskIds: newTaskIds\r\n            }\r\n            const newState = {\r\n                ...data,\r\n                columns: {\r\n                    ...data.columns,\r\n                    [newColumn.id]: newColumn\r\n                }\r\n            }\r\n            setData(newState)\r\n            return;\r\n        }\r\n\r\n        //If dropped in a different column\r\n        const startTasks = Array.from(start.taskIds);\r\n        startTasks.splice(source.index, 1);\r\n        const newStart = {\r\n            ...start,\r\n            taskIds: startTasks\r\n        }\r\n        const finishTasks = Array.from(finish.taskIds);\r\n        finishTasks.splice(destination.index, 0, draggableId);\r\n        const newFinish = {\r\n            ...finish,\r\n            taskIds: finishTasks\r\n        }\r\n        const newState = {\r\n            ...data,\r\n            columns: {\r\n                ...data.columns,\r\n                [newStart.id]: newStart,\r\n                [newFinish.id]: newFinish\r\n            }\r\n        }\r\n\r\n        setData(newState)\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId='all-columns' direction='horizontal' type='column'>\r\n                {(provided) => (\r\n                <div className=\"card-list\" {...provided.droppableProps} ref={provided.innerRef}>\r\n                    <div className=\"row\">\r\n                        {data.columnOrder.map((id, index) => {\r\n                        const column = data.columns[id];\r\n                        const tasks = column.taskIds.map(taskId => data.tasks[taskId]) \r\n                        return <Col key={column.id} tasks={tasks} column={column} index={index} />\r\n                        })}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    )\r\n}\r\nexport default CardList;\r\n","import './App.css';\nimport CardList from './components/cardList.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Trello</h1>\n      <CardList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}